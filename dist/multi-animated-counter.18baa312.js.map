{"version":3,"sources":["multi-animated-counter.js"],"names":["$","visibilityIds","counterClass","defaultSpeed","getVisibilityStatus","elValFromTop","windowHeight","window","height","windowScrollValFromTop","scrollTop","forEach","item","index","Math","ceil","offset","top","err","counter_init","groupId","num","speed","direction","each","attr","easing","undefined","addClass","doCount","groupClass","animate","duration","step","now","text","floor","complete","on"],"mappings":";AAAAA,EAAE,WAgCMC,IAAAA,EAAgB,CAAC,cAAe,cAAe,cAAe,kBAC9DC,EAAe,WACfC,EAAe,IAYVC,SAAAA,IACLC,aAAe,GACXC,IAAAA,EAAeN,EAAEO,QAAQC,SACzBC,EAAyBT,EAAE,MAAMU,YAErCT,EAAcU,QAAQ,SAAUC,EAAMC,GAC9B,IACAR,aAAaQ,GAASC,KAAKC,KAAKf,EAAEY,GAAMI,SAASC,KACnD,MAAOC,GACL,OAICZ,EAAeG,EAA0BJ,aAAaQ,IAM1DM,SAAaC,GACdC,IAAAA,EAAKC,EAAOC,EAAWV,EAAQ,EACnCb,EAAEE,GAAcsB,KAAK,WACjBH,EAAMrB,EAAE,MAAMyB,KAAK,kBACnBH,EAAQtB,EAAE,MAAMyB,KAAK,cACrBF,EAAYvB,EAAE,MAAMyB,KAAK,kBACzBC,OAAS1B,EAAE,MAAMyB,KAAK,eACTE,MAATL,IAAoBA,EAAQnB,GAChCH,EAAE,MAAM4B,SAAS,KAAOf,GACxBgB,EAAQR,EAAKR,EAAOS,EAAOF,EAASG,EAAWG,QAC/Cb,MAfIM,CAAaP,KAmBhBiB,SAAAA,EAAQR,EAAKR,EAAOS,EAAOQ,EAAYP,EAAWG,GAE1CC,MAAVD,IAAqBA,EAAS,SACjC1B,EAFgB8B,EAAa,IAAM5B,EAAe,MAAaW,GAElDkB,QAAQ,CACjBV,IAAAA,GACD,CACCW,UAAWV,EACXI,OAAQA,EACRO,KAAM,SAAUC,GACK,WAAbX,EACAvB,EAAE,MAAMmC,KAAKd,EAAMP,KAAKsB,MAAMF,IAE9BlC,EAAE,MAAMmC,KAAKrB,KAAKsB,MAAMF,KAGhCG,SAAUR,IAvDlB7B,EAAEO,QAAQ+B,GAAG,SAAU,WACnBlC,MAIJA","file":"multi-animated-counter.18baa312.js","sourceRoot":"..","sourcesContent":["$(function () {\n\n    // ! Counter (used for Social Proof)\n\n    /* Usage example\n        <div id=\"counters_1\">\n            <div =\"counter\" data-TargetNum=\"10\" data-Speed=\"6000\"></div>\n            <div class=\"counter\" data-TargetNum=\"7\" data-Speed=\"7000\" \n            data-Direction=\"reverse\" data-Easing=\"linear\"></div>\n            <div class=\"counter\" data-TargetNum=\"80333\" data-Speed=\"2500\">0</div>\n        </div>\n        <div id=\"counters_2\">\n            <div class=\"counter\" data-TargetNum=\"4200\" data-Speed=\"1000\">0</div>\n            <div class=\"counter\" data-TargetNum=\"4500\" data-Speed=\"4000\">0</div>\n            <div class=\"counter\" data-TargetNum=\"4743\">0</div>\n        </div>\n        <div id=\"counters_3\">\n            <div class=\"counter\" data-TargetNum=\"5200\" data-Speed=\"1000\">0</div>\n            <div class=\"counter\" data-TargetNum=\"5500\" data-Speed=\"4000\">0</div>\n            <div class=\"counter\" data-TargetNum=\"5743\">0</div>\n        </div>\n    \n       Required attr: data-TargetNum\n       Optionals attr: data-Speed(milisecons), data-Direction(reverse), data-Easing(linear, swing)\n\n       **CONFIG**\n       Please set a the ID's to watch, a class for all counters and a default speed\n\n       Avoid to use this script in pages where it isn't needed\n    */\n\n    // CONFIG\n    let visibilityIds = ['#counters_1', '#counters_2', '#counters_3', '#counters_hero']; //must be an array, could have only one element\n    let counterClass = '.counter';\n    let defaultSpeed = 3000; //default value\n\n    // END CONFIG\n\n    //init if it becomes visible by scrolling\n    $(window).on('scroll', function () {\n        getVisibilityStatus();\n    });\n\n    //init if it's visible by page loading\n    getVisibilityStatus();\n\n    function getVisibilityStatus() {\n        elValFromTop = [];\n        var windowHeight = $(window).height(),\n            windowScrollValFromTop = $(this).scrollTop();\n\n        visibilityIds.forEach(function (item, index) { //Call each class\n            try { //avoid error if class not exist\n                elValFromTop[index] = Math.ceil($(item).offset().top);\n            } catch (err) {\n                return;\n            }\n            // if the sum of the window height and scroll distance from the top is greater than the target element's distance from the top, \n            //it should be in view and the event should fire, otherwise reverse any previously applied methods\n            if ((windowHeight + windowScrollValFromTop) > elValFromTop[index]) {\n                counter_init(item);\n            }\n        });\n    }\n\n    function counter_init(groupId) {\n        let num, speed, direction, index = 0;\n        $(counterClass).each(function () {\n            num = $(this).attr('data-TargetNum');\n            speed = $(this).attr('data-Speed');\n            direction = $(this).attr('data-Direction');\n            easing = $(this).attr('data-Easing');\n            if (speed == undefined) speed = defaultSpeed;\n            $(this).addClass('c_' + index); //add a class to recognize each counter\n            doCount(num, index, speed, groupId, direction, easing);\n            index++;\n        });\n    }\n\n    function doCount(num, index, speed, groupClass, direction, easing) {\n        let className = groupClass + ' ' + counterClass + '.' + 'c_' + index;\n        if(easing == undefined) easing = \"swing\";\n        $(className).animate({\n            num\n        }, {\n            duration: +speed,\n            easing: easing,\n            step: function (now) {\n                if (direction == 'reverse') {\n                    $(this).text(num - Math.floor(now));\n                } else {\n                    $(this).text(Math.floor(now));\n                }\n            },\n            complete: doCount\n        });\n    }\n})"]}